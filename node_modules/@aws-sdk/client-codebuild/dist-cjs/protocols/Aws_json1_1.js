"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.de_BatchGetReportGroupsCommand = exports.de_BatchGetProjectsCommand = exports.de_BatchGetBuildsCommand = exports.de_BatchGetBuildBatchesCommand = exports.de_BatchDeleteBuildsCommand = exports.se_UpdateWebhookCommand = exports.se_UpdateReportGroupCommand = exports.se_UpdateProjectVisibilityCommand = exports.se_UpdateProjectCommand = exports.se_StopBuildBatchCommand = exports.se_StopBuildCommand = exports.se_StartBuildBatchCommand = exports.se_StartBuildCommand = exports.se_RetryBuildBatchCommand = exports.se_RetryBuildCommand = exports.se_PutResourcePolicyCommand = exports.se_ListSourceCredentialsCommand = exports.se_ListSharedReportGroupsCommand = exports.se_ListSharedProjectsCommand = exports.se_ListReportsForReportGroupCommand = exports.se_ListReportsCommand = exports.se_ListReportGroupsCommand = exports.se_ListProjectsCommand = exports.se_ListCuratedEnvironmentImagesCommand = exports.se_ListBuildsForProjectCommand = exports.se_ListBuildsCommand = exports.se_ListBuildBatchesForProjectCommand = exports.se_ListBuildBatchesCommand = exports.se_InvalidateProjectCacheCommand = exports.se_ImportSourceCredentialsCommand = exports.se_GetResourcePolicyCommand = exports.se_GetReportGroupTrendCommand = exports.se_DescribeTestCasesCommand = exports.se_DescribeCodeCoveragesCommand = exports.se_DeleteWebhookCommand = exports.se_DeleteSourceCredentialsCommand = exports.se_DeleteResourcePolicyCommand = exports.se_DeleteReportGroupCommand = exports.se_DeleteReportCommand = exports.se_DeleteProjectCommand = exports.se_DeleteBuildBatchCommand = exports.se_CreateWebhookCommand = exports.se_CreateReportGroupCommand = exports.se_CreateProjectCommand = exports.se_BatchGetReportsCommand = exports.se_BatchGetReportGroupsCommand = exports.se_BatchGetProjectsCommand = exports.se_BatchGetBuildsCommand = exports.se_BatchGetBuildBatchesCommand = exports.se_BatchDeleteBuildsCommand = void 0;
exports.de_UpdateWebhookCommand = exports.de_UpdateReportGroupCommand = exports.de_UpdateProjectVisibilityCommand = exports.de_UpdateProjectCommand = exports.de_StopBuildBatchCommand = exports.de_StopBuildCommand = exports.de_StartBuildBatchCommand = exports.de_StartBuildCommand = exports.de_RetryBuildBatchCommand = exports.de_RetryBuildCommand = exports.de_PutResourcePolicyCommand = exports.de_ListSourceCredentialsCommand = exports.de_ListSharedReportGroupsCommand = exports.de_ListSharedProjectsCommand = exports.de_ListReportsForReportGroupCommand = exports.de_ListReportsCommand = exports.de_ListReportGroupsCommand = exports.de_ListProjectsCommand = exports.de_ListCuratedEnvironmentImagesCommand = exports.de_ListBuildsForProjectCommand = exports.de_ListBuildsCommand = exports.de_ListBuildBatchesForProjectCommand = exports.de_ListBuildBatchesCommand = exports.de_InvalidateProjectCacheCommand = exports.de_ImportSourceCredentialsCommand = exports.de_GetResourcePolicyCommand = exports.de_GetReportGroupTrendCommand = exports.de_DescribeTestCasesCommand = exports.de_DescribeCodeCoveragesCommand = exports.de_DeleteWebhookCommand = exports.de_DeleteSourceCredentialsCommand = exports.de_DeleteResourcePolicyCommand = exports.de_DeleteReportGroupCommand = exports.de_DeleteReportCommand = exports.de_DeleteProjectCommand = exports.de_DeleteBuildBatchCommand = exports.de_CreateWebhookCommand = exports.de_CreateReportGroupCommand = exports.de_CreateProjectCommand = exports.de_BatchGetReportsCommand = void 0;
const protocol_http_1 = require("@smithy/protocol-http");
const smithy_client_1 = require("@smithy/smithy-client");
const CodeBuildServiceException_1 = require("../models/CodeBuildServiceException");
const models_0_1 = require("../models/models_0");
const se_BatchDeleteBuildsCommand = async (input, context) => {
    const headers = sharedHeaders("BatchDeleteBuilds");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_BatchDeleteBuildsCommand = se_BatchDeleteBuildsCommand;
const se_BatchGetBuildBatchesCommand = async (input, context) => {
    const headers = sharedHeaders("BatchGetBuildBatches");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_BatchGetBuildBatchesCommand = se_BatchGetBuildBatchesCommand;
const se_BatchGetBuildsCommand = async (input, context) => {
    const headers = sharedHeaders("BatchGetBuilds");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_BatchGetBuildsCommand = se_BatchGetBuildsCommand;
const se_BatchGetProjectsCommand = async (input, context) => {
    const headers = sharedHeaders("BatchGetProjects");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_BatchGetProjectsCommand = se_BatchGetProjectsCommand;
const se_BatchGetReportGroupsCommand = async (input, context) => {
    const headers = sharedHeaders("BatchGetReportGroups");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_BatchGetReportGroupsCommand = se_BatchGetReportGroupsCommand;
const se_BatchGetReportsCommand = async (input, context) => {
    const headers = sharedHeaders("BatchGetReports");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_BatchGetReportsCommand = se_BatchGetReportsCommand;
const se_CreateProjectCommand = async (input, context) => {
    const headers = sharedHeaders("CreateProject");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateProjectCommand = se_CreateProjectCommand;
const se_CreateReportGroupCommand = async (input, context) => {
    const headers = sharedHeaders("CreateReportGroup");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateReportGroupCommand = se_CreateReportGroupCommand;
const se_CreateWebhookCommand = async (input, context) => {
    const headers = sharedHeaders("CreateWebhook");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateWebhookCommand = se_CreateWebhookCommand;
const se_DeleteBuildBatchCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteBuildBatch");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteBuildBatchCommand = se_DeleteBuildBatchCommand;
const se_DeleteProjectCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteProject");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteProjectCommand = se_DeleteProjectCommand;
const se_DeleteReportCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteReport");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteReportCommand = se_DeleteReportCommand;
const se_DeleteReportGroupCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteReportGroup");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteReportGroupCommand = se_DeleteReportGroupCommand;
const se_DeleteResourcePolicyCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteResourcePolicy");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteResourcePolicyCommand = se_DeleteResourcePolicyCommand;
const se_DeleteSourceCredentialsCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteSourceCredentials");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteSourceCredentialsCommand = se_DeleteSourceCredentialsCommand;
const se_DeleteWebhookCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteWebhook");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteWebhookCommand = se_DeleteWebhookCommand;
const se_DescribeCodeCoveragesCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeCodeCoverages");
    let body;
    body = JSON.stringify(se_DescribeCodeCoveragesInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeCodeCoveragesCommand = se_DescribeCodeCoveragesCommand;
const se_DescribeTestCasesCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeTestCases");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeTestCasesCommand = se_DescribeTestCasesCommand;
const se_GetReportGroupTrendCommand = async (input, context) => {
    const headers = sharedHeaders("GetReportGroupTrend");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetReportGroupTrendCommand = se_GetReportGroupTrendCommand;
const se_GetResourcePolicyCommand = async (input, context) => {
    const headers = sharedHeaders("GetResourcePolicy");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetResourcePolicyCommand = se_GetResourcePolicyCommand;
const se_ImportSourceCredentialsCommand = async (input, context) => {
    const headers = sharedHeaders("ImportSourceCredentials");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ImportSourceCredentialsCommand = se_ImportSourceCredentialsCommand;
const se_InvalidateProjectCacheCommand = async (input, context) => {
    const headers = sharedHeaders("InvalidateProjectCache");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_InvalidateProjectCacheCommand = se_InvalidateProjectCacheCommand;
const se_ListBuildBatchesCommand = async (input, context) => {
    const headers = sharedHeaders("ListBuildBatches");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListBuildBatchesCommand = se_ListBuildBatchesCommand;
const se_ListBuildBatchesForProjectCommand = async (input, context) => {
    const headers = sharedHeaders("ListBuildBatchesForProject");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListBuildBatchesForProjectCommand = se_ListBuildBatchesForProjectCommand;
const se_ListBuildsCommand = async (input, context) => {
    const headers = sharedHeaders("ListBuilds");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListBuildsCommand = se_ListBuildsCommand;
const se_ListBuildsForProjectCommand = async (input, context) => {
    const headers = sharedHeaders("ListBuildsForProject");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListBuildsForProjectCommand = se_ListBuildsForProjectCommand;
const se_ListCuratedEnvironmentImagesCommand = async (input, context) => {
    const headers = sharedHeaders("ListCuratedEnvironmentImages");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListCuratedEnvironmentImagesCommand = se_ListCuratedEnvironmentImagesCommand;
const se_ListProjectsCommand = async (input, context) => {
    const headers = sharedHeaders("ListProjects");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListProjectsCommand = se_ListProjectsCommand;
const se_ListReportGroupsCommand = async (input, context) => {
    const headers = sharedHeaders("ListReportGroups");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListReportGroupsCommand = se_ListReportGroupsCommand;
const se_ListReportsCommand = async (input, context) => {
    const headers = sharedHeaders("ListReports");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListReportsCommand = se_ListReportsCommand;
const se_ListReportsForReportGroupCommand = async (input, context) => {
    const headers = sharedHeaders("ListReportsForReportGroup");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListReportsForReportGroupCommand = se_ListReportsForReportGroupCommand;
const se_ListSharedProjectsCommand = async (input, context) => {
    const headers = sharedHeaders("ListSharedProjects");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListSharedProjectsCommand = se_ListSharedProjectsCommand;
const se_ListSharedReportGroupsCommand = async (input, context) => {
    const headers = sharedHeaders("ListSharedReportGroups");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListSharedReportGroupsCommand = se_ListSharedReportGroupsCommand;
const se_ListSourceCredentialsCommand = async (input, context) => {
    const headers = sharedHeaders("ListSourceCredentials");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListSourceCredentialsCommand = se_ListSourceCredentialsCommand;
const se_PutResourcePolicyCommand = async (input, context) => {
    const headers = sharedHeaders("PutResourcePolicy");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_PutResourcePolicyCommand = se_PutResourcePolicyCommand;
const se_RetryBuildCommand = async (input, context) => {
    const headers = sharedHeaders("RetryBuild");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_RetryBuildCommand = se_RetryBuildCommand;
const se_RetryBuildBatchCommand = async (input, context) => {
    const headers = sharedHeaders("RetryBuildBatch");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_RetryBuildBatchCommand = se_RetryBuildBatchCommand;
const se_StartBuildCommand = async (input, context) => {
    const headers = sharedHeaders("StartBuild");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_StartBuildCommand = se_StartBuildCommand;
const se_StartBuildBatchCommand = async (input, context) => {
    const headers = sharedHeaders("StartBuildBatch");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_StartBuildBatchCommand = se_StartBuildBatchCommand;
const se_StopBuildCommand = async (input, context) => {
    const headers = sharedHeaders("StopBuild");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_StopBuildCommand = se_StopBuildCommand;
const se_StopBuildBatchCommand = async (input, context) => {
    const headers = sharedHeaders("StopBuildBatch");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_StopBuildBatchCommand = se_StopBuildBatchCommand;
const se_UpdateProjectCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateProject");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_UpdateProjectCommand = se_UpdateProjectCommand;
const se_UpdateProjectVisibilityCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateProjectVisibility");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_UpdateProjectVisibilityCommand = se_UpdateProjectVisibilityCommand;
const se_UpdateReportGroupCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateReportGroup");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_UpdateReportGroupCommand = se_UpdateReportGroupCommand;
const se_UpdateWebhookCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateWebhook");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_UpdateWebhookCommand = se_UpdateWebhookCommand;
const de_BatchDeleteBuildsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_BatchDeleteBuildsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_BatchDeleteBuildsCommand = de_BatchDeleteBuildsCommand;
const de_BatchDeleteBuildsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInputException":
        case "com.amazonaws.codebuild#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_BatchGetBuildBatchesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_BatchGetBuildBatchesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_BatchGetBuildBatchesOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_BatchGetBuildBatchesCommand = de_BatchGetBuildBatchesCommand;
const de_BatchGetBuildBatchesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInputException":
        case "com.amazonaws.codebuild#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_BatchGetBuildsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_BatchGetBuildsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_BatchGetBuildsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_BatchGetBuildsCommand = de_BatchGetBuildsCommand;
const de_BatchGetBuildsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInputException":
        case "com.amazonaws.codebuild#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_BatchGetProjectsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_BatchGetProjectsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_BatchGetProjectsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_BatchGetProjectsCommand = de_BatchGetProjectsCommand;
const de_BatchGetProjectsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInputException":
        case "com.amazonaws.codebuild#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_BatchGetReportGroupsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_BatchGetReportGroupsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_BatchGetReportGroupsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_BatchGetReportGroupsCommand = de_BatchGetReportGroupsCommand;
const de_BatchGetReportGroupsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInputException":
        case "com.amazonaws.codebuild#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_BatchGetReportsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_BatchGetReportsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_BatchGetReportsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_BatchGetReportsCommand = de_BatchGetReportsCommand;
const de_BatchGetReportsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInputException":
        case "com.amazonaws.codebuild#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_CreateProjectCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateProjectCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateProjectOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_CreateProjectCommand = de_CreateProjectCommand;
const de_CreateProjectCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccountLimitExceededException":
        case "com.amazonaws.codebuild#AccountLimitExceededException":
            throw await de_AccountLimitExceededExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.codebuild#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "ResourceAlreadyExistsException":
        case "com.amazonaws.codebuild#ResourceAlreadyExistsException":
            throw await de_ResourceAlreadyExistsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_CreateReportGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateReportGroupCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateReportGroupOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_CreateReportGroupCommand = de_CreateReportGroupCommand;
const de_CreateReportGroupCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccountLimitExceededException":
        case "com.amazonaws.codebuild#AccountLimitExceededException":
            throw await de_AccountLimitExceededExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.codebuild#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "ResourceAlreadyExistsException":
        case "com.amazonaws.codebuild#ResourceAlreadyExistsException":
            throw await de_ResourceAlreadyExistsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_CreateWebhookCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateWebhookCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateWebhookOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_CreateWebhookCommand = de_CreateWebhookCommand;
const de_CreateWebhookCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInputException":
        case "com.amazonaws.codebuild#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OAuthProviderException":
        case "com.amazonaws.codebuild#OAuthProviderException":
            throw await de_OAuthProviderExceptionRes(parsedOutput, context);
        case "ResourceAlreadyExistsException":
        case "com.amazonaws.codebuild#ResourceAlreadyExistsException":
            throw await de_ResourceAlreadyExistsExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.codebuild#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeleteBuildBatchCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteBuildBatchCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DeleteBuildBatchCommand = de_DeleteBuildBatchCommand;
const de_DeleteBuildBatchCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInputException":
        case "com.amazonaws.codebuild#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeleteProjectCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteProjectCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DeleteProjectCommand = de_DeleteProjectCommand;
const de_DeleteProjectCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInputException":
        case "com.amazonaws.codebuild#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeleteReportCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteReportCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DeleteReportCommand = de_DeleteReportCommand;
const de_DeleteReportCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInputException":
        case "com.amazonaws.codebuild#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeleteReportGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteReportGroupCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DeleteReportGroupCommand = de_DeleteReportGroupCommand;
const de_DeleteReportGroupCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInputException":
        case "com.amazonaws.codebuild#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeleteResourcePolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteResourcePolicyCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DeleteResourcePolicyCommand = de_DeleteResourcePolicyCommand;
const de_DeleteResourcePolicyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInputException":
        case "com.amazonaws.codebuild#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeleteSourceCredentialsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteSourceCredentialsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DeleteSourceCredentialsCommand = de_DeleteSourceCredentialsCommand;
const de_DeleteSourceCredentialsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInputException":
        case "com.amazonaws.codebuild#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.codebuild#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeleteWebhookCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteWebhookCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DeleteWebhookCommand = de_DeleteWebhookCommand;
const de_DeleteWebhookCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInputException":
        case "com.amazonaws.codebuild#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OAuthProviderException":
        case "com.amazonaws.codebuild#OAuthProviderException":
            throw await de_OAuthProviderExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.codebuild#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DescribeCodeCoveragesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeCodeCoveragesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeCodeCoveragesOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DescribeCodeCoveragesCommand = de_DescribeCodeCoveragesCommand;
const de_DescribeCodeCoveragesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInputException":
        case "com.amazonaws.codebuild#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DescribeTestCasesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeTestCasesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeTestCasesOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DescribeTestCasesCommand = de_DescribeTestCasesCommand;
const de_DescribeTestCasesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInputException":
        case "com.amazonaws.codebuild#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.codebuild#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetReportGroupTrendCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetReportGroupTrendCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetReportGroupTrendCommand = de_GetReportGroupTrendCommand;
const de_GetReportGroupTrendCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInputException":
        case "com.amazonaws.codebuild#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.codebuild#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetResourcePolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetResourcePolicyCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetResourcePolicyCommand = de_GetResourcePolicyCommand;
const de_GetResourcePolicyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInputException":
        case "com.amazonaws.codebuild#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.codebuild#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ImportSourceCredentialsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ImportSourceCredentialsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ImportSourceCredentialsCommand = de_ImportSourceCredentialsCommand;
const de_ImportSourceCredentialsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccountLimitExceededException":
        case "com.amazonaws.codebuild#AccountLimitExceededException":
            throw await de_AccountLimitExceededExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.codebuild#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "ResourceAlreadyExistsException":
        case "com.amazonaws.codebuild#ResourceAlreadyExistsException":
            throw await de_ResourceAlreadyExistsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_InvalidateProjectCacheCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_InvalidateProjectCacheCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_InvalidateProjectCacheCommand = de_InvalidateProjectCacheCommand;
const de_InvalidateProjectCacheCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInputException":
        case "com.amazonaws.codebuild#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.codebuild#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ListBuildBatchesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListBuildBatchesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ListBuildBatchesCommand = de_ListBuildBatchesCommand;
const de_ListBuildBatchesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInputException":
        case "com.amazonaws.codebuild#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ListBuildBatchesForProjectCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListBuildBatchesForProjectCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ListBuildBatchesForProjectCommand = de_ListBuildBatchesForProjectCommand;
const de_ListBuildBatchesForProjectCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInputException":
        case "com.amazonaws.codebuild#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.codebuild#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ListBuildsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListBuildsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ListBuildsCommand = de_ListBuildsCommand;
const de_ListBuildsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInputException":
        case "com.amazonaws.codebuild#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ListBuildsForProjectCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListBuildsForProjectCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ListBuildsForProjectCommand = de_ListBuildsForProjectCommand;
const de_ListBuildsForProjectCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInputException":
        case "com.amazonaws.codebuild#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.codebuild#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ListCuratedEnvironmentImagesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListCuratedEnvironmentImagesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ListCuratedEnvironmentImagesCommand = de_ListCuratedEnvironmentImagesCommand;
const de_ListCuratedEnvironmentImagesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody,
        errorCode,
    });
};
const de_ListProjectsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListProjectsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ListProjectsCommand = de_ListProjectsCommand;
const de_ListProjectsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInputException":
        case "com.amazonaws.codebuild#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ListReportGroupsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListReportGroupsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ListReportGroupsCommand = de_ListReportGroupsCommand;
const de_ListReportGroupsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInputException":
        case "com.amazonaws.codebuild#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ListReportsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListReportsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ListReportsCommand = de_ListReportsCommand;
const de_ListReportsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInputException":
        case "com.amazonaws.codebuild#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ListReportsForReportGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListReportsForReportGroupCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ListReportsForReportGroupCommand = de_ListReportsForReportGroupCommand;
const de_ListReportsForReportGroupCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInputException":
        case "com.amazonaws.codebuild#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.codebuild#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ListSharedProjectsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListSharedProjectsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ListSharedProjectsCommand = de_ListSharedProjectsCommand;
const de_ListSharedProjectsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInputException":
        case "com.amazonaws.codebuild#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ListSharedReportGroupsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListSharedReportGroupsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ListSharedReportGroupsCommand = de_ListSharedReportGroupsCommand;
const de_ListSharedReportGroupsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInputException":
        case "com.amazonaws.codebuild#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ListSourceCredentialsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListSourceCredentialsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ListSourceCredentialsCommand = de_ListSourceCredentialsCommand;
const de_ListSourceCredentialsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInputException":
        case "com.amazonaws.codebuild#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_PutResourcePolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_PutResourcePolicyCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_PutResourcePolicyCommand = de_PutResourcePolicyCommand;
const de_PutResourcePolicyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInputException":
        case "com.amazonaws.codebuild#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.codebuild#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_RetryBuildCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_RetryBuildCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_RetryBuildOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_RetryBuildCommand = de_RetryBuildCommand;
const de_RetryBuildCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccountLimitExceededException":
        case "com.amazonaws.codebuild#AccountLimitExceededException":
            throw await de_AccountLimitExceededExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.codebuild#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.codebuild#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_RetryBuildBatchCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_RetryBuildBatchCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_RetryBuildBatchOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_RetryBuildBatchCommand = de_RetryBuildBatchCommand;
const de_RetryBuildBatchCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInputException":
        case "com.amazonaws.codebuild#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.codebuild#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_StartBuildCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StartBuildCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_StartBuildOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_StartBuildCommand = de_StartBuildCommand;
const de_StartBuildCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccountLimitExceededException":
        case "com.amazonaws.codebuild#AccountLimitExceededException":
            throw await de_AccountLimitExceededExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.codebuild#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.codebuild#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_StartBuildBatchCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StartBuildBatchCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_StartBuildBatchOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_StartBuildBatchCommand = de_StartBuildBatchCommand;
const de_StartBuildBatchCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInputException":
        case "com.amazonaws.codebuild#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.codebuild#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_StopBuildCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StopBuildCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_StopBuildOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_StopBuildCommand = de_StopBuildCommand;
const de_StopBuildCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInputException":
        case "com.amazonaws.codebuild#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.codebuild#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_StopBuildBatchCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StopBuildBatchCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_StopBuildBatchOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_StopBuildBatchCommand = de_StopBuildBatchCommand;
const de_StopBuildBatchCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInputException":
        case "com.amazonaws.codebuild#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.codebuild#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_UpdateProjectCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateProjectCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateProjectOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_UpdateProjectCommand = de_UpdateProjectCommand;
const de_UpdateProjectCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInputException":
        case "com.amazonaws.codebuild#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.codebuild#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_UpdateProjectVisibilityCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateProjectVisibilityCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_UpdateProjectVisibilityCommand = de_UpdateProjectVisibilityCommand;
const de_UpdateProjectVisibilityCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInputException":
        case "com.amazonaws.codebuild#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.codebuild#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_UpdateReportGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateReportGroupCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateReportGroupOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_UpdateReportGroupCommand = de_UpdateReportGroupCommand;
const de_UpdateReportGroupCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInputException":
        case "com.amazonaws.codebuild#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.codebuild#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_UpdateWebhookCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateWebhookCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateWebhookOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_UpdateWebhookCommand = de_UpdateWebhookCommand;
const de_UpdateWebhookCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInputException":
        case "com.amazonaws.codebuild#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "OAuthProviderException":
        case "com.amazonaws.codebuild#OAuthProviderException":
            throw await de_OAuthProviderExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.codebuild#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_AccountLimitExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.AccountLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidInputExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.InvalidInputException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_OAuthProviderExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.OAuthProviderException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_ResourceAlreadyExistsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.ResourceAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const se_DescribeCodeCoveragesInput = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        maxLineCoveragePercentage: smithy_client_1.serializeFloat,
        maxResults: [],
        minLineCoveragePercentage: smithy_client_1.serializeFloat,
        nextToken: [],
        reportArn: [],
        sortBy: [],
        sortOrder: [],
    });
};
const de_BatchGetBuildBatchesOutput = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        buildBatches: (_) => de_BuildBatches(_, context),
        buildBatchesNotFound: smithy_client_1._json,
    });
};
const de_BatchGetBuildsOutput = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        builds: (_) => de_Builds(_, context),
        buildsNotFound: smithy_client_1._json,
    });
};
const de_BatchGetProjectsOutput = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        projects: (_) => de_Projects(_, context),
        projectsNotFound: smithy_client_1._json,
    });
};
const de_BatchGetReportGroupsOutput = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        reportGroups: (_) => de_ReportGroups(_, context),
        reportGroupsNotFound: smithy_client_1._json,
    });
};
const de_BatchGetReportsOutput = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        reports: (_) => de_Reports(_, context),
        reportsNotFound: smithy_client_1._json,
    });
};
const de_Build = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        arn: smithy_client_1.expectString,
        artifacts: smithy_client_1._json,
        buildBatchArn: smithy_client_1.expectString,
        buildComplete: smithy_client_1.expectBoolean,
        buildNumber: smithy_client_1.expectLong,
        buildStatus: smithy_client_1.expectString,
        cache: smithy_client_1._json,
        currentPhase: smithy_client_1.expectString,
        debugSession: smithy_client_1._json,
        encryptionKey: smithy_client_1.expectString,
        endTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        environment: smithy_client_1._json,
        exportedEnvironmentVariables: smithy_client_1._json,
        fileSystemLocations: smithy_client_1._json,
        id: smithy_client_1.expectString,
        initiator: smithy_client_1.expectString,
        logs: smithy_client_1._json,
        networkInterface: smithy_client_1._json,
        phases: (_) => de_BuildPhases(_, context),
        projectName: smithy_client_1.expectString,
        queuedTimeoutInMinutes: smithy_client_1.expectInt32,
        reportArns: smithy_client_1._json,
        resolvedSourceVersion: smithy_client_1.expectString,
        secondaryArtifacts: smithy_client_1._json,
        secondarySourceVersions: smithy_client_1._json,
        secondarySources: smithy_client_1._json,
        serviceRole: smithy_client_1.expectString,
        source: smithy_client_1._json,
        sourceVersion: smithy_client_1.expectString,
        startTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        timeoutInMinutes: smithy_client_1.expectInt32,
        vpcConfig: smithy_client_1._json,
    });
};
const de_BuildBatch = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        arn: smithy_client_1.expectString,
        artifacts: smithy_client_1._json,
        buildBatchConfig: smithy_client_1._json,
        buildBatchNumber: smithy_client_1.expectLong,
        buildBatchStatus: smithy_client_1.expectString,
        buildGroups: (_) => de_BuildGroups(_, context),
        buildTimeoutInMinutes: smithy_client_1.expectInt32,
        cache: smithy_client_1._json,
        complete: smithy_client_1.expectBoolean,
        currentPhase: smithy_client_1.expectString,
        debugSessionEnabled: smithy_client_1.expectBoolean,
        encryptionKey: smithy_client_1.expectString,
        endTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        environment: smithy_client_1._json,
        fileSystemLocations: smithy_client_1._json,
        id: smithy_client_1.expectString,
        initiator: smithy_client_1.expectString,
        logConfig: smithy_client_1._json,
        phases: (_) => de_BuildBatchPhases(_, context),
        projectName: smithy_client_1.expectString,
        queuedTimeoutInMinutes: smithy_client_1.expectInt32,
        resolvedSourceVersion: smithy_client_1.expectString,
        secondaryArtifacts: smithy_client_1._json,
        secondarySourceVersions: smithy_client_1._json,
        secondarySources: smithy_client_1._json,
        serviceRole: smithy_client_1.expectString,
        source: smithy_client_1._json,
        sourceVersion: smithy_client_1.expectString,
        startTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        vpcConfig: smithy_client_1._json,
    });
};
const de_BuildBatches = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_BuildBatch(entry, context);
    });
    return retVal;
};
const de_BuildBatchPhase = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        contexts: smithy_client_1._json,
        durationInSeconds: smithy_client_1.expectLong,
        endTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        phaseStatus: smithy_client_1.expectString,
        phaseType: smithy_client_1.expectString,
        startTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
    });
};
const de_BuildBatchPhases = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_BuildBatchPhase(entry, context);
    });
    return retVal;
};
const de_BuildGroup = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        currentBuildSummary: (_) => de_BuildSummary(_, context),
        dependsOn: smithy_client_1._json,
        identifier: smithy_client_1.expectString,
        ignoreFailure: smithy_client_1.expectBoolean,
        priorBuildSummaryList: (_) => de_BuildSummaries(_, context),
    });
};
const de_BuildGroups = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_BuildGroup(entry, context);
    });
    return retVal;
};
const de_BuildPhase = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        contexts: smithy_client_1._json,
        durationInSeconds: smithy_client_1.expectLong,
        endTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        phaseStatus: smithy_client_1.expectString,
        phaseType: smithy_client_1.expectString,
        startTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
    });
};
const de_BuildPhases = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_BuildPhase(entry, context);
    });
    return retVal;
};
const de_Builds = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Build(entry, context);
    });
    return retVal;
};
const de_BuildSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_BuildSummary(entry, context);
    });
    return retVal;
};
const de_BuildSummary = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        arn: smithy_client_1.expectString,
        buildStatus: smithy_client_1.expectString,
        primaryArtifact: smithy_client_1._json,
        requestedOn: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        secondaryArtifacts: smithy_client_1._json,
    });
};
const de_CodeCoverage = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        branchCoveragePercentage: smithy_client_1.limitedParseDouble,
        branchesCovered: smithy_client_1.expectInt32,
        branchesMissed: smithy_client_1.expectInt32,
        expired: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        filePath: smithy_client_1.expectString,
        id: smithy_client_1.expectString,
        lineCoveragePercentage: smithy_client_1.limitedParseDouble,
        linesCovered: smithy_client_1.expectInt32,
        linesMissed: smithy_client_1.expectInt32,
        reportARN: smithy_client_1.expectString,
    });
};
const de_CodeCoverageReportSummary = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        branchCoveragePercentage: smithy_client_1.limitedParseDouble,
        branchesCovered: smithy_client_1.expectInt32,
        branchesMissed: smithy_client_1.expectInt32,
        lineCoveragePercentage: smithy_client_1.limitedParseDouble,
        linesCovered: smithy_client_1.expectInt32,
        linesMissed: smithy_client_1.expectInt32,
    });
};
const de_CodeCoverages = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CodeCoverage(entry, context);
    });
    return retVal;
};
const de_CreateProjectOutput = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        project: (_) => de_Project(_, context),
    });
};
const de_CreateReportGroupOutput = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        reportGroup: (_) => de_ReportGroup(_, context),
    });
};
const de_CreateWebhookOutput = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        webhook: (_) => de_Webhook(_, context),
    });
};
const de_DescribeCodeCoveragesOutput = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        codeCoverages: (_) => de_CodeCoverages(_, context),
        nextToken: smithy_client_1.expectString,
    });
};
const de_DescribeTestCasesOutput = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        nextToken: smithy_client_1.expectString,
        testCases: (_) => de_TestCases(_, context),
    });
};
const de_Project = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        arn: smithy_client_1.expectString,
        artifacts: smithy_client_1._json,
        badge: smithy_client_1._json,
        buildBatchConfig: smithy_client_1._json,
        cache: smithy_client_1._json,
        concurrentBuildLimit: smithy_client_1.expectInt32,
        created: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        description: smithy_client_1.expectString,
        encryptionKey: smithy_client_1.expectString,
        environment: smithy_client_1._json,
        fileSystemLocations: smithy_client_1._json,
        lastModified: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        logsConfig: smithy_client_1._json,
        name: smithy_client_1.expectString,
        projectVisibility: smithy_client_1.expectString,
        publicProjectAlias: smithy_client_1.expectString,
        queuedTimeoutInMinutes: smithy_client_1.expectInt32,
        resourceAccessRole: smithy_client_1.expectString,
        secondaryArtifacts: smithy_client_1._json,
        secondarySourceVersions: smithy_client_1._json,
        secondarySources: smithy_client_1._json,
        serviceRole: smithy_client_1.expectString,
        source: smithy_client_1._json,
        sourceVersion: smithy_client_1.expectString,
        tags: smithy_client_1._json,
        timeoutInMinutes: smithy_client_1.expectInt32,
        vpcConfig: smithy_client_1._json,
        webhook: (_) => de_Webhook(_, context),
    });
};
const de_Projects = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Project(entry, context);
    });
    return retVal;
};
const de_Report = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        arn: smithy_client_1.expectString,
        codeCoverageSummary: (_) => de_CodeCoverageReportSummary(_, context),
        created: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        executionId: smithy_client_1.expectString,
        expired: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        exportConfig: smithy_client_1._json,
        name: smithy_client_1.expectString,
        reportGroupArn: smithy_client_1.expectString,
        status: smithy_client_1.expectString,
        testSummary: smithy_client_1._json,
        truncated: smithy_client_1.expectBoolean,
        type: smithy_client_1.expectString,
    });
};
const de_ReportGroup = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        arn: smithy_client_1.expectString,
        created: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        exportConfig: smithy_client_1._json,
        lastModified: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        name: smithy_client_1.expectString,
        status: smithy_client_1.expectString,
        tags: smithy_client_1._json,
        type: smithy_client_1.expectString,
    });
};
const de_ReportGroups = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ReportGroup(entry, context);
    });
    return retVal;
};
const de_Reports = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Report(entry, context);
    });
    return retVal;
};
const de_RetryBuildBatchOutput = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        buildBatch: (_) => de_BuildBatch(_, context),
    });
};
const de_RetryBuildOutput = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        build: (_) => de_Build(_, context),
    });
};
const de_StartBuildBatchOutput = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        buildBatch: (_) => de_BuildBatch(_, context),
    });
};
const de_StartBuildOutput = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        build: (_) => de_Build(_, context),
    });
};
const de_StopBuildBatchOutput = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        buildBatch: (_) => de_BuildBatch(_, context),
    });
};
const de_StopBuildOutput = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        build: (_) => de_Build(_, context),
    });
};
const de_TestCase = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        durationInNanoSeconds: smithy_client_1.expectLong,
        expired: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        message: smithy_client_1.expectString,
        name: smithy_client_1.expectString,
        prefix: smithy_client_1.expectString,
        reportArn: smithy_client_1.expectString,
        status: smithy_client_1.expectString,
        testRawDataPath: smithy_client_1.expectString,
    });
};
const de_TestCases = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TestCase(entry, context);
    });
    return retVal;
};
const de_UpdateProjectOutput = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        project: (_) => de_Project(_, context),
    });
};
const de_UpdateReportGroupOutput = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        reportGroup: (_) => de_ReportGroup(_, context),
    });
};
const de_UpdateWebhookOutput = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        webhook: (_) => de_Webhook(_, context),
    });
};
const de_Webhook = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        branchFilter: smithy_client_1.expectString,
        buildType: smithy_client_1.expectString,
        filterGroups: smithy_client_1._json,
        lastModifiedSecret: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        payloadUrl: smithy_client_1.expectString,
        secret: smithy_client_1.expectString,
        url: smithy_client_1.expectString,
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => (0, smithy_client_1.collectBody)(streamBody, context).then((body) => context.utf8Encoder(body));
const throwDefaultError = (0, smithy_client_1.withBaseException)(CodeBuildServiceException_1.CodeBuildServiceException);
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new protocol_http_1.HttpRequest(contents);
};
function sharedHeaders(operation) {
    return {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": `CodeBuild_20161006.${operation}`,
    };
}
const parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
        return JSON.parse(encoded);
    }
    return {};
});
const parseErrorBody = async (errorBody, context) => {
    const value = await parseBody(errorBody, context);
    value.message = value.message ?? value.Message;
    return value;
};
const loadRestJsonErrorCode = (output, data) => {
    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
    const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
            cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
            cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    const headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
};
