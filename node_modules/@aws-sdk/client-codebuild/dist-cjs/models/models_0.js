"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImportSourceCredentialsInputFilterSensitiveLog = exports.RetryBuildBatchType = exports.SharedResourceSortByType = exports.ReportGroupSortByType = exports.ProjectSortByType = exports.PlatformType = exports.LanguageType = exports.ServerType = exports.ReportGroupTrendFieldType = exports.SortOrderType = exports.ReportCodeCoverageSortByType = exports.ResourceNotFoundException = exports.OAuthProviderException = exports.ResourceAlreadyExistsException = exports.ReportStatusType = exports.ReportType = exports.ReportGroupStatusType = exports.ReportPackagingType = exports.ReportExportConfigType = exports.WebhookFilterType = exports.WebhookBuildType = exports.ProjectVisibilityType = exports.BuildPhaseType = exports.SourceType = exports.SourceAuthType = exports.BuildBatchPhaseType = exports.LogsConfigStatusType = exports.FileSystemType = exports.EnvironmentType = exports.CredentialProviderType = exports.ImagePullCredentialsType = exports.EnvironmentVariableType = exports.ComputeType = exports.CacheType = exports.CacheMode = exports.StatusType = exports.BatchReportModeType = exports.BucketOwnerAccess = exports.InvalidInputException = exports.AuthType = exports.ArtifactsType = exports.ArtifactPackaging = exports.ArtifactNamespace = exports.AccountLimitExceededException = void 0;
const smithy_client_1 = require("@smithy/smithy-client");
const CodeBuildServiceException_1 = require("./CodeBuildServiceException");
class AccountLimitExceededException extends CodeBuildServiceException_1.CodeBuildServiceException {
    constructor(opts) {
        super({
            name: "AccountLimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "AccountLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AccountLimitExceededException.prototype);
    }
}
exports.AccountLimitExceededException = AccountLimitExceededException;
exports.ArtifactNamespace = {
    BUILD_ID: "BUILD_ID",
    NONE: "NONE",
};
exports.ArtifactPackaging = {
    NONE: "NONE",
    ZIP: "ZIP",
};
exports.ArtifactsType = {
    CODEPIPELINE: "CODEPIPELINE",
    NO_ARTIFACTS: "NO_ARTIFACTS",
    S3: "S3",
};
exports.AuthType = {
    BASIC_AUTH: "BASIC_AUTH",
    OAUTH: "OAUTH",
    PERSONAL_ACCESS_TOKEN: "PERSONAL_ACCESS_TOKEN",
};
class InvalidInputException extends CodeBuildServiceException_1.CodeBuildServiceException {
    constructor(opts) {
        super({
            name: "InvalidInputException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidInputException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidInputException.prototype);
    }
}
exports.InvalidInputException = InvalidInputException;
exports.BucketOwnerAccess = {
    FULL: "FULL",
    NONE: "NONE",
    READ_ONLY: "READ_ONLY",
};
exports.BatchReportModeType = {
    REPORT_AGGREGATED_BATCH: "REPORT_AGGREGATED_BATCH",
    REPORT_INDIVIDUAL_BUILDS: "REPORT_INDIVIDUAL_BUILDS",
};
exports.StatusType = {
    FAILED: "FAILED",
    FAULT: "FAULT",
    IN_PROGRESS: "IN_PROGRESS",
    STOPPED: "STOPPED",
    SUCCEEDED: "SUCCEEDED",
    TIMED_OUT: "TIMED_OUT",
};
exports.CacheMode = {
    LOCAL_CUSTOM_CACHE: "LOCAL_CUSTOM_CACHE",
    LOCAL_DOCKER_LAYER_CACHE: "LOCAL_DOCKER_LAYER_CACHE",
    LOCAL_SOURCE_CACHE: "LOCAL_SOURCE_CACHE",
};
exports.CacheType = {
    LOCAL: "LOCAL",
    NO_CACHE: "NO_CACHE",
    S3: "S3",
};
exports.ComputeType = {
    BUILD_GENERAL1_2XLARGE: "BUILD_GENERAL1_2XLARGE",
    BUILD_GENERAL1_LARGE: "BUILD_GENERAL1_LARGE",
    BUILD_GENERAL1_MEDIUM: "BUILD_GENERAL1_MEDIUM",
    BUILD_GENERAL1_SMALL: "BUILD_GENERAL1_SMALL",
};
exports.EnvironmentVariableType = {
    PARAMETER_STORE: "PARAMETER_STORE",
    PLAINTEXT: "PLAINTEXT",
    SECRETS_MANAGER: "SECRETS_MANAGER",
};
exports.ImagePullCredentialsType = {
    CODEBUILD: "CODEBUILD",
    SERVICE_ROLE: "SERVICE_ROLE",
};
exports.CredentialProviderType = {
    SECRETS_MANAGER: "SECRETS_MANAGER",
};
exports.EnvironmentType = {
    ARM_CONTAINER: "ARM_CONTAINER",
    LINUX_CONTAINER: "LINUX_CONTAINER",
    LINUX_GPU_CONTAINER: "LINUX_GPU_CONTAINER",
    WINDOWS_CONTAINER: "WINDOWS_CONTAINER",
    WINDOWS_SERVER_2019_CONTAINER: "WINDOWS_SERVER_2019_CONTAINER",
};
exports.FileSystemType = {
    EFS: "EFS",
};
exports.LogsConfigStatusType = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
exports.BuildBatchPhaseType = {
    COMBINE_ARTIFACTS: "COMBINE_ARTIFACTS",
    DOWNLOAD_BATCHSPEC: "DOWNLOAD_BATCHSPEC",
    FAILED: "FAILED",
    IN_PROGRESS: "IN_PROGRESS",
    STOPPED: "STOPPED",
    SUBMITTED: "SUBMITTED",
    SUCCEEDED: "SUCCEEDED",
};
exports.SourceAuthType = {
    OAUTH: "OAUTH",
};
exports.SourceType = {
    BITBUCKET: "BITBUCKET",
    CODECOMMIT: "CODECOMMIT",
    CODEPIPELINE: "CODEPIPELINE",
    GITHUB: "GITHUB",
    GITHUB_ENTERPRISE: "GITHUB_ENTERPRISE",
    NO_SOURCE: "NO_SOURCE",
    S3: "S3",
};
exports.BuildPhaseType = {
    BUILD: "BUILD",
    COMPLETED: "COMPLETED",
    DOWNLOAD_SOURCE: "DOWNLOAD_SOURCE",
    FINALIZING: "FINALIZING",
    INSTALL: "INSTALL",
    POST_BUILD: "POST_BUILD",
    PRE_BUILD: "PRE_BUILD",
    PROVISIONING: "PROVISIONING",
    QUEUED: "QUEUED",
    SUBMITTED: "SUBMITTED",
    UPLOAD_ARTIFACTS: "UPLOAD_ARTIFACTS",
};
exports.ProjectVisibilityType = {
    PRIVATE: "PRIVATE",
    PUBLIC_READ: "PUBLIC_READ",
};
exports.WebhookBuildType = {
    BUILD: "BUILD",
    BUILD_BATCH: "BUILD_BATCH",
};
exports.WebhookFilterType = {
    ACTOR_ACCOUNT_ID: "ACTOR_ACCOUNT_ID",
    BASE_REF: "BASE_REF",
    COMMIT_MESSAGE: "COMMIT_MESSAGE",
    EVENT: "EVENT",
    FILE_PATH: "FILE_PATH",
    HEAD_REF: "HEAD_REF",
};
exports.ReportExportConfigType = {
    NO_EXPORT: "NO_EXPORT",
    S3: "S3",
};
exports.ReportPackagingType = {
    NONE: "NONE",
    ZIP: "ZIP",
};
exports.ReportGroupStatusType = {
    ACTIVE: "ACTIVE",
    DELETING: "DELETING",
};
exports.ReportType = {
    CODE_COVERAGE: "CODE_COVERAGE",
    TEST: "TEST",
};
exports.ReportStatusType = {
    DELETING: "DELETING",
    FAILED: "FAILED",
    GENERATING: "GENERATING",
    INCOMPLETE: "INCOMPLETE",
    SUCCEEDED: "SUCCEEDED",
};
class ResourceAlreadyExistsException extends CodeBuildServiceException_1.CodeBuildServiceException {
    constructor(opts) {
        super({
            name: "ResourceAlreadyExistsException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceAlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceAlreadyExistsException.prototype);
    }
}
exports.ResourceAlreadyExistsException = ResourceAlreadyExistsException;
class OAuthProviderException extends CodeBuildServiceException_1.CodeBuildServiceException {
    constructor(opts) {
        super({
            name: "OAuthProviderException",
            $fault: "client",
            ...opts,
        });
        this.name = "OAuthProviderException";
        this.$fault = "client";
        Object.setPrototypeOf(this, OAuthProviderException.prototype);
    }
}
exports.OAuthProviderException = OAuthProviderException;
class ResourceNotFoundException extends CodeBuildServiceException_1.CodeBuildServiceException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
    }
}
exports.ResourceNotFoundException = ResourceNotFoundException;
exports.ReportCodeCoverageSortByType = {
    FILE_PATH: "FILE_PATH",
    LINE_COVERAGE_PERCENTAGE: "LINE_COVERAGE_PERCENTAGE",
};
exports.SortOrderType = {
    ASCENDING: "ASCENDING",
    DESCENDING: "DESCENDING",
};
exports.ReportGroupTrendFieldType = {
    BRANCHES_COVERED: "BRANCHES_COVERED",
    BRANCHES_MISSED: "BRANCHES_MISSED",
    BRANCH_COVERAGE: "BRANCH_COVERAGE",
    DURATION: "DURATION",
    LINES_COVERED: "LINES_COVERED",
    LINES_MISSED: "LINES_MISSED",
    LINE_COVERAGE: "LINE_COVERAGE",
    PASS_RATE: "PASS_RATE",
    TOTAL: "TOTAL",
};
exports.ServerType = {
    BITBUCKET: "BITBUCKET",
    GITHUB: "GITHUB",
    GITHUB_ENTERPRISE: "GITHUB_ENTERPRISE",
};
exports.LanguageType = {
    ANDROID: "ANDROID",
    BASE: "BASE",
    DOCKER: "DOCKER",
    DOTNET: "DOTNET",
    GOLANG: "GOLANG",
    JAVA: "JAVA",
    NODE_JS: "NODE_JS",
    PHP: "PHP",
    PYTHON: "PYTHON",
    RUBY: "RUBY",
};
exports.PlatformType = {
    AMAZON_LINUX: "AMAZON_LINUX",
    DEBIAN: "DEBIAN",
    UBUNTU: "UBUNTU",
    WINDOWS_SERVER: "WINDOWS_SERVER",
};
exports.ProjectSortByType = {
    CREATED_TIME: "CREATED_TIME",
    LAST_MODIFIED_TIME: "LAST_MODIFIED_TIME",
    NAME: "NAME",
};
exports.ReportGroupSortByType = {
    CREATED_TIME: "CREATED_TIME",
    LAST_MODIFIED_TIME: "LAST_MODIFIED_TIME",
    NAME: "NAME",
};
exports.SharedResourceSortByType = {
    ARN: "ARN",
    MODIFIED_TIME: "MODIFIED_TIME",
};
exports.RetryBuildBatchType = {
    RETRY_ALL_BUILDS: "RETRY_ALL_BUILDS",
    RETRY_FAILED_BUILDS: "RETRY_FAILED_BUILDS",
};
const ImportSourceCredentialsInputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.token && { token: smithy_client_1.SENSITIVE_STRING }),
});
exports.ImportSourceCredentialsInputFilterSensitiveLog = ImportSourceCredentialsInputFilterSensitiveLog;
