import { EndpointParameterInstructions } from "@smithy/middleware-endpoint";
import { Command as $Command } from "@smithy/smithy-client";
import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@smithy/types";
import { CodeBuildClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "../CodeBuildClient";
import { BatchGetReportGroupsInput, BatchGetReportGroupsOutput } from "../models/models_0";
/**
 * @public
 */
export { __MetadataBearer, $Command };
/**
 * @public
 *
 * The input for {@link BatchGetReportGroupsCommand}.
 */
export interface BatchGetReportGroupsCommandInput extends BatchGetReportGroupsInput {
}
/**
 * @public
 *
 * The output of {@link BatchGetReportGroupsCommand}.
 */
export interface BatchGetReportGroupsCommandOutput extends BatchGetReportGroupsOutput, __MetadataBearer {
}
/**
 * @public
 * <p>
 *       Returns an array of report groups.
 *     </p>
 * @example
 * Use a bare-bones client and the command you need to make an API call.
 * ```javascript
 * import { CodeBuildClient, BatchGetReportGroupsCommand } from "@aws-sdk/client-codebuild"; // ES Modules import
 * // const { CodeBuildClient, BatchGetReportGroupsCommand } = require("@aws-sdk/client-codebuild"); // CommonJS import
 * const client = new CodeBuildClient(config);
 * const input = { // BatchGetReportGroupsInput
 *   reportGroupArns: [ // ReportGroupArns // required
 *     "STRING_VALUE",
 *   ],
 * };
 * const command = new BatchGetReportGroupsCommand(input);
 * const response = await client.send(command);
 * // { // BatchGetReportGroupsOutput
 * //   reportGroups: [ // ReportGroups
 * //     { // ReportGroup
 * //       arn: "STRING_VALUE",
 * //       name: "STRING_VALUE",
 * //       type: "STRING_VALUE",
 * //       exportConfig: { // ReportExportConfig
 * //         exportConfigType: "STRING_VALUE",
 * //         s3Destination: { // S3ReportExportConfig
 * //           bucket: "STRING_VALUE",
 * //           bucketOwner: "STRING_VALUE",
 * //           path: "STRING_VALUE",
 * //           packaging: "STRING_VALUE",
 * //           encryptionKey: "STRING_VALUE",
 * //           encryptionDisabled: true || false,
 * //         },
 * //       },
 * //       created: new Date("TIMESTAMP"),
 * //       lastModified: new Date("TIMESTAMP"),
 * //       tags: [ // TagList
 * //         { // Tag
 * //           key: "STRING_VALUE",
 * //           value: "STRING_VALUE",
 * //         },
 * //       ],
 * //       status: "STRING_VALUE",
 * //     },
 * //   ],
 * //   reportGroupsNotFound: [ // ReportGroupArns
 * //     "STRING_VALUE",
 * //   ],
 * // };
 *
 * ```
 *
 * @param BatchGetReportGroupsCommandInput - {@link BatchGetReportGroupsCommandInput}
 * @returns {@link BatchGetReportGroupsCommandOutput}
 * @see {@link BatchGetReportGroupsCommandInput} for command's `input` shape.
 * @see {@link BatchGetReportGroupsCommandOutput} for command's `response` shape.
 * @see {@link CodeBuildClientResolvedConfig | config} for CodeBuildClient's `config` shape.
 *
 * @throws {@link InvalidInputException} (client fault)
 *  <p>The input value that was provided is not valid.</p>
 *
 * @throws {@link CodeBuildServiceException}
 * <p>Base exception class for all service exceptions from CodeBuild service.</p>
 *
 */
export declare class BatchGetReportGroupsCommand extends $Command<BatchGetReportGroupsCommandInput, BatchGetReportGroupsCommandOutput, CodeBuildClientResolvedConfig> {
    readonly input: BatchGetReportGroupsCommandInput;
    static getEndpointParameterInstructions(): EndpointParameterInstructions;
    /**
     * @public
     */
    constructor(input: BatchGetReportGroupsCommandInput);
    /**
     * @internal
     */
    resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeBuildClientResolvedConfig, options?: __HttpHandlerOptions): Handler<BatchGetReportGroupsCommandInput, BatchGetReportGroupsCommandOutput>;
    /**
     * @internal
     */
    private serialize;
    /**
     * @internal
     */
    private deserialize;
}
