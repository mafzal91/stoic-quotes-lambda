"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Generator = void 0;
const fs_1 = require("fs");
const path_1 = require("path");
const perf_hooks_1 = require("perf_hooks");
const introspector_1 = require("./introspector");
const serializer_1 = require("./serializer");
const transformer_1 = require("./transformer");
/**
 * Generates codegen output using specified options.
 */
class Generator {
    constructor(options) {
        this.connectionString = options.connectionString;
        this.dialect = options.dialect;
        this.introspector = options.introspector ?? new introspector_1.Introspector();
        this.logger = options.logger;
        this.serializer = options.serializer ?? new serializer_1.Serializer();
        this.transformer =
            options.transformer ??
                new transformer_1.Transformer(options.dialect, options.camelCase);
    }
    async generate(options) {
        const startTime = perf_hooks_1.performance.now();
        this.logger?.info('Introspecting database...');
        const tables = await this.introspector.introspect({
            connectionString: this.connectionString,
            dialect: this.dialect,
            excludePattern: options.excludePattern,
            includePattern: options.includePattern,
        });
        this.logger?.debug();
        this.logger?.debug(`Found ${tables.length} public tables:`);
        for (const table of tables) {
            this.logger?.debug(` - ${table.name}`);
        }
        this.logger?.debug();
        const nodes = this.transformer.transform(tables);
        const data = this.serializer.serialize(nodes);
        if (options.print) {
            this.logger?.log();
            this.logger?.log(data);
        }
        else {
            const outDir = (0, path_1.parse)(options.outFile).dir;
            await fs_1.promises.mkdir(outDir, { recursive: true });
            await fs_1.promises.writeFile(options.outFile, data);
            const endTime = perf_hooks_1.performance.now();
            const relativeOutDir = `.${path_1.sep}${(0, path_1.relative)(process.cwd(), options.outFile)}`;
            const duration = Math.round(endTime - startTime);
            this.logger?.success(`Introspected ${tables.length} table${tables.length === 1 ? '' : 's'} and generated ${relativeOutDir} in ${duration}ms.\n`);
        }
    }
}
exports.Generator = Generator;
//# sourceMappingURL=generator.js.map