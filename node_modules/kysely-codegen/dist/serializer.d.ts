import { ObjectExpressionNode } from './nodes';
import { AliasDeclarationNode } from './nodes/alias-declaration-node';
import { ArrayExpressionNode } from './nodes/array-expression-node';
import { ExportStatementNode } from './nodes/export-statement-node';
import { ExpressionNode } from './nodes/expression-node';
import { ExtendsClauseNode } from './nodes/extends-clause-node';
import { GenericExpressionNode } from './nodes/generic-expression-node';
import { IdentifierNode } from './nodes/identifier-node';
import { ImportStatementNode } from './nodes/import-statement-node';
import { InferClauseNode } from './nodes/infer-clause-node';
import { InterfaceDeclarationNode } from './nodes/interface-declaration-node';
import { MappedTypeNode } from './nodes/mapped-type-node';
import { PropertyNode } from './nodes/property-node';
import { StatementNode } from './nodes/statement-node';
import { UnionExpressionNode } from './nodes/union-expression-node';
/**
 * Creates a TypeScript output string from a codegen AST.
 */
export declare class Serializer {
    serialize(nodes: StatementNode[]): string;
    serializeAliasDeclaration(node: AliasDeclarationNode): string;
    serializeArrayExpression(node: ArrayExpressionNode): string;
    serializeExportStatement(node: ExportStatementNode): string;
    serializeExpression(node: ExpressionNode): string;
    serializeExtendsClause(node: ExtendsClauseNode): string;
    serializeGenericExpression(node: GenericExpressionNode): string;
    serializeIdentifier(node: IdentifierNode): string;
    serializeImportStatement(node: ImportStatementNode): string;
    serializeInferClause(node: InferClauseNode): string;
    serializeInterfaceDeclaration(node: InterfaceDeclarationNode): string;
    serializeKey(key: string): string;
    serializeMappedType(node: MappedTypeNode): string;
    serializeObjectExpression(node: ObjectExpressionNode): string;
    serializeProperty(node: PropertyNode): string;
    serializeUnionExpression(node: UnionExpressionNode): string;
}
