"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Introspector = void 0;
const kysely_1 = require("kysely");
const table_matcher_1 = require("./table-matcher");
/**
 * Uses the Kysely introspector to gather table metadata from a database connection.
 */
class Introspector {
    async createKysely(options) {
        return new kysely_1.Kysely({
            dialect: await options.dialect.createKyselyDialect({
                connectionString: options.connectionString,
                ssl: options.ssl,
            }),
        });
    }
    async introspect(options) {
        let tables = [];
        // Insane solution in lieu of a better one.
        // We'll create a database connection with SSL, and if it complains about SSL, try without it.
        for (const ssl of [true, false]) {
            try {
                const db = await this.createKysely({ ...options, ssl });
                tables = await db.introspection.getTables();
                await db.destroy();
                break;
            }
            catch (error) {
                const isSslError = error instanceof Error && /\bSSL\b/.test(error.message);
                const isUnexpectedError = !ssl || !isSslError;
                if (isUnexpectedError) {
                    throw error;
                }
            }
        }
        if (options.includePattern) {
            const tableMatcher = new table_matcher_1.TableMatcher(options.includePattern);
            tables = tables.filter(({ name, schema }) => tableMatcher.match(schema, name));
        }
        if (options.excludePattern) {
            const tableMatcher = new table_matcher_1.TableMatcher(options.excludePattern);
            tables = tables.filter(({ name, schema }) => !tableMatcher.match(schema, name));
        }
        return tables;
    }
}
exports.Introspector = Introspector;
//# sourceMappingURL=introspector.js.map